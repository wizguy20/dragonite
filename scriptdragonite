-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local Startup = Instance.new("ImageLabel")
local OpenandClose = Instance.new("TextButton")
local Frame = Instance.new("Frame")
local TextLabel = Instance.new("TextLabel")
local destroy = Instance.new("TextButton")
local ScrollingFrame = Instance.new("ScrollingFrame")
local ESPbox = Instance.new("TextButton")
local SilentAimbox = Instance.new("TextButton")
local Hitboxesbox = Instance.new("TextButton")
local Creditsbox = Instance.new("TextButton")
local ESPFrame = Instance.new("Frame")
local hitesp = Instance.new("TextButton")
local SilentFrame = Instance.new("Frame")
local silentaim = Instance.new("TextButton")
local HitFrame = Instance.new("Frame")
local small = Instance.new("TextButton")
local bigbox = Instance.new("TextButton")
local CreditFrame = Instance.new("Frame")
local TextLabel_2 = Instance.new("TextLabel")
local TextLabel_3 = Instance.new("TextLabel")
local TextLabel_4 = Instance.new("TextLabel")
local TextLabel_5 = Instance.new("TextLabel")
local TextLabel_6 = Instance.new("TextLabel")
local welcomebox = Instance.new("Frame")
local introductionbox = Instance.new("TextLabel")
local introductionbox_2 = Instance.new("TextLabel")
local introductionbox_3 = Instance.new("TextLabel")
local login = Instance.new("Frame")
local bar69 = Instance.new("TextLabel")
local username = Instance.new("TextBox")
local pass = Instance.new("TextBox")
local login_2 = Instance.new("TextButton")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Startup.Name = "Startup"
Startup.Parent = ScreenGui
Startup.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
Startup.BackgroundTransparency = 1.000
Startup.Position = UDim2.new(0.441169471, 0, 0.286060631, 0)
Startup.Size = UDim2.new(0, 254, 0, 242)
Startup.Image = "http://www.roblox.com/asset/?id=30358124"

OpenandClose.Name = "OpenandClose"
OpenandClose.Parent = ScreenGui
OpenandClose.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
OpenandClose.BorderColor3 = Color3.fromRGB(45, 45, 45)
OpenandClose.BorderSizePixel = 4
OpenandClose.Position = UDim2.new(0, 0, 0.699393928, 0)
OpenandClose.Size = UDim2.new(0, 157, 0, 41)
OpenandClose.Visible = false
OpenandClose.Font = Enum.Font.SourceSansBold
OpenandClose.Text = "Open"
OpenandClose.TextColor3 = Color3.fromRGB(0, 0, 0)
OpenandClose.TextSize = 17.000

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
Frame.BorderColor3 = Color3.fromRGB(45, 45, 45)
Frame.BorderSizePixel = 5
Frame.Position = UDim2.new(0.242405057, 0, 0.280471295, 0)
Frame.Size = UDim2.new(0, 437, 0, 284)
Frame.Visible = false
Frame.Active = true
Frame.Draggable = true


TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(0, 437, 0, 36)
TextLabel.Font = Enum.Font.SourceSansBold
TextLabel.Text = "Dragonite"
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextSize = 14.000

destroy.Name = "destroy"
destroy.Parent = TextLabel
destroy.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
destroy.BorderColor3 = Color3.fromRGB(65, 65, 65)
destroy.Position = UDim2.new(0, 398, 0, 0)
destroy.Size = UDim2.new(0, 39, 0, 24)
destroy.Font = Enum.Font.SourceSansBold
destroy.Text = "DESTROY"
destroy.TextColor3 = Color3.fromRGB(0, 0, 0)
destroy.TextScaled = true
destroy.TextSize = 14.000
destroy.TextWrapped = true

ScrollingFrame.Parent = Frame
ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
ScrollingFrame.BorderColor3 = Color3.fromRGB(45, 45, 45)
ScrollingFrame.Position = UDim2.new(0, 0, 0.126760557, 0)
ScrollingFrame.Size = UDim2.new(0, 80, 0, 248)
ScrollingFrame.ScrollBarThickness = 8

ESPbox.Name = "ESPbox"
ESPbox.Parent = ScrollingFrame
ESPbox.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
ESPbox.BorderColor3 = Color3.fromRGB(45, 45, 45)
ESPbox.Size = UDim2.new(0, 70, 0, 60)
ESPbox.Font = Enum.Font.SourceSansBold
ESPbox.LineHeight = 0.900
ESPbox.Text = "ESP"
ESPbox.TextColor3 = Color3.fromRGB(0, 0, 0)
ESPbox.TextSize = 14.000

SilentAimbox.Name = "SilentAimbox"
SilentAimbox.Parent = ScrollingFrame
SilentAimbox.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
SilentAimbox.BorderColor3 = Color3.fromRGB(45, 45, 45)
SilentAimbox.Position = UDim2.new(0, 0, 0.105633803, 0)
SilentAimbox.Size = UDim2.new(0, 70, 0, 60)
SilentAimbox.Font = Enum.Font.SourceSansBold
SilentAimbox.LineHeight = 0.900
SilentAimbox.Text = "SilentAim"
SilentAimbox.TextColor3 = Color3.fromRGB(0, 0, 0)
SilentAimbox.TextSize = 14.000

Hitboxesbox.Name = "Hitboxesbox"
Hitboxesbox.Parent = ScrollingFrame
Hitboxesbox.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
Hitboxesbox.BorderColor3 = Color3.fromRGB(45, 45, 45)
Hitboxesbox.Position = UDim2.new(0, 0, 0.211267605, 0)
Hitboxesbox.Size = UDim2.new(0, 70, 0, 60)
Hitboxesbox.Font = Enum.Font.SourceSansBold
Hitboxesbox.LineHeight = 0.900
Hitboxesbox.Text = "Hitboxes"
Hitboxesbox.TextColor3 = Color3.fromRGB(0, 0, 0)
Hitboxesbox.TextSize = 14.000

Creditsbox.Name = "Creditsbox"
Creditsbox.Parent = ScrollingFrame
Creditsbox.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
Creditsbox.BorderColor3 = Color3.fromRGB(45, 45, 45)
Creditsbox.Position = UDim2.new(0, 0, 0.315140873, 0)
Creditsbox.Size = UDim2.new(0, 70, 0, 60)
Creditsbox.Font = Enum.Font.SourceSansBold
Creditsbox.LineHeight = 0.900
Creditsbox.Text = "Credits"
Creditsbox.TextColor3 = Color3.fromRGB(0, 0, 0)
Creditsbox.TextSize = 14.000

ESPFrame.Name = "ESPFrame"
ESPFrame.Parent = Frame
ESPFrame.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
ESPFrame.BorderColor3 = Color3.fromRGB(45, 45, 45)
ESPFrame.Position = UDim2.new(0.183066368, 0, 0.126760557, 0)
ESPFrame.Size = UDim2.new(0, 357, 0, 248)
ESPFrame.Visible = false

hitesp.Name = "hitesp"
hitesp.Parent = ESPFrame
hitesp.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
hitesp.BackgroundTransparency = 0.300
hitesp.Position = UDim2.new(0, 68, 0, 65)
hitesp.Size = UDim2.new(0, 200, 0, 50)
hitesp.Font = Enum.Font.SourceSansBold
hitesp.Text = "ESP, not real one"
hitesp.TextColor3 = Color3.fromRGB(0, 0, 0)
hitesp.TextSize = 11.000
hitesp.MouseButton1Down:connect(function()
	-- Unnamed ESP

	assert(Drawing, 'exploit not supported')

	local UserInputService = game:GetService'UserInputService';
	local HttpService = game:GetService'HttpService';
	local GUIService = game:GetService'GuiService';
	local RunService = game:GetService'RunService';
	local Players = game:GetService'Players';
	local LocalPlayer = Players.LocalPlayer;
	local Camera = workspace.CurrentCamera
	local Mouse = LocalPlayer:GetMouse();
	local Menu = {};
	local MouseHeld = false;
	local LastRefresh = 0;
	local OptionsFile = 'IC3_ESP_SETTINGS.dat';
	local Binding = false;
	local BindedKey = nil;
	local OIndex = 0;
	local LineBox = {};
	local UIButtons = {};
	local Sliders = {};
	local Dragging = false;
	local DraggingUI = false;
	local DragOffset = Vector2.new();
	local DraggingWhat = nil;
	local OldData = {};
	local IgnoreList = {};
	local Red = Color3.new(1, 0, 0);
	local Green = Color3.new(0, 1, 0);
	local MenuLoaded = false;

	shared.MenuDrawingData = shared.MenuDrawingData or { Instances = {} };
	shared.PlayerData = shared.PlayerData or {};
	shared.RSName = shared.RSName or ('UnnamedESP_by_ic3-' .. HttpService:GenerateGUID(false));

	local GetDataName = shared.RSName .. '-GetData';
	local UpdateName = shared.RSName .. '-Update';

	local Debounce = setmetatable({}, {
		__index = function(t, i)
			return rawget(t, i) or false
		end;
	});

	pcall(function() shared.InputBeganCon:disconnect() end);
	pcall(function() shared.InputEndedCon:disconnect() end);

	function GetMouseLocation()
		return UserInputService:GetMouseLocation();
	end

	function MouseHoveringOver(Values)
		local X1, Y1, X2, Y2 = Values[1], Values[2], Values[3], Values[4]
		local MLocation = GetMouseLocation();
		return (MLocation.x >= X1 and MLocation.x <= (X1 + (X2 - X1))) and (MLocation.y >= Y1 and MLocation.y <= (Y1 + (Y2 - Y1)));
	end

	function GetTableData(t) -- basically table.foreach i dont even know why i made this
		if typeof(t) ~= 'table' then return end
		return setmetatable(t, {
			__call = function(t, func)
				if typeof(func) ~= 'function' then return end;
				for i, v in pairs(t) do
					pcall(func, i, v);
				end
			end;
		});
	end
	local function Format(format, ...)
		return string.format(format, ...);
	end
	function CalculateValue(Min, Max, Percent)
		return Min + math.floor(((Max - Min) * Percent) + .5);
	end

	local Options = setmetatable({}, {
		__call = function(t, ...)
			local Arguments = {...};
			local Name = Arguments[1];
			OIndex = OIndex + 1; -- (typeof(Arguments[3]) == 'boolean' and 1 or 0);
			rawset(t, Name, setmetatable({
				Name = Arguments[1];
				Text = Arguments[2];
				Value = Arguments[3];
				DefaultValue = Arguments[3];
				AllArgs = Arguments;
				Index = OIndex;
			}, {
				__call = function(t, v)
					if typeof(t.Value) == 'function' then
						t.Value();
					elseif typeof(t.Value) == 'EnumItem' then
						local BT = Menu:GetInstance(Format('%s_BindText', t.Name));
						Binding = true;
						local Val = 0
						while Binding do
							wait();
							Val = (Val + 1) % 17;
							BT.Text = Val <= 8 and '|' or '';
						end
						t.Value = BindedKey;
						BT.Text = tostring(t.Value):match'%w+%.%w+%.(.+)';
						BT.Position = t.BasePosition + Vector2.new(t.BaseSize.X - BT.TextBounds.X - 20, -10);
					else
						local NewValue = v;
						if NewValue == nil then NewValue = not t.Value; end
						rawset(t, 'Value', NewValue);
						if Arguments[2] ~= nil then
							if typeof(Arguments[3]) == 'number' then
								local AMT = Menu:GetInstance(Format('%s_AmountText', t.Name));
								AMT.Text = tostring(t.Value);
								AMT.Position = t.BasePosition + Vector2.new(t.BaseSize.X - AMT.TextBounds.X - 10, -10);
							else
								local Inner = Menu:GetInstance(Format('%s_InnerCircle', t.Name));
								Inner.Visible = t.Value;
							end
						end
					end
				end;
			}));
		end;
	})

	function Load()
		local _, Result = pcall(readfile, OptionsFile);
		if _ then -- extremely ugly code yea i know but i dont care p.s. i hate pcall
			local _, Table = pcall(HttpService.JSONDecode, HttpService, Result);
			if _ then
				for i, v in pairs(Table) do
					if Options[i] ~= nil and Options[i].Value ~= nil and (typeof(Options[i].Value) == 'boolean' or typeof(Options[i].Value) == 'number') then
						Options[i].Value = v.Value;
						pcall(Options[i], v.Value);
					end
				end
			end
		end
	end

	Options('Enabled', 'ESP Enabled', true);
	Options('ShowTeam', 'Show Team', false);
	Options('ShowName', 'Show Names', true);
	Options('ShowDistance', 'Show Distance', true);
	Options('ShowHealth', 'Show Health', true);
	Options('ShowBoxes', 'Show Boxes', true);
	Options('ShowTracers', 'Show Tracers', true);
	Options('ShowDot', 'Show Head Dot', false);
	Options('VisCheck', 'Visibility Check', false);
	Options('Crosshair', 'Crosshair', false);
	Options('TextOutline', 'Text Outline', true);
	Options('TextSize', 'Text Size', syn and 18 or 14, 10, 24); -- cuz synapse fonts look weird???
	Options('MaxDistance', 'Max Distance', 2500, 100, 5000);
	Options('RefreshRate', 'Refresh Rate (ms)', 5, 1, 200);
	Options('MenuKey', 'Menu Key', Enum.KeyCode.F4, 1);
	Options('ResetSettings', 'Reset Settings', function()
		for i, v in pairs(Options) do
			if Options[i] ~= nil and Options[i].Value ~= nil and Options[i].Text ~= nil and (typeof(Options[i].Value) == 'boolean' or typeof(Options[i].Value) == 'number') then
				Options[i](Options[i].DefaultValue);
			end
		end
	end, 4);
	Options('LoadSettings', 'Load Settings', Load, 3);
	Options('SaveSettings', 'Save Settings', function()
		writefile(OptionsFile, HttpService:JSONEncode(Options));
	end, 2)
	-- Options.SaveSettings.Value();

	Load();

	Options('MenuOpen', nil, true);

	local function Set(t, i, v)
		t[i] = v;
	end
	local function Combine(...)
		local Output = {};
		for i, v in pairs{...} do
			if typeof(v) == 'table' then
				table.foreach(v, function(i, v)
					Output[i] = v;
				end)
			end
		end
		return Output
	end
	function IsStringEmpty(String)
		if type(String) == 'string' then
			return String:match'^%s+$' ~= nil or #String == 0 or String == '' or false;
		end
		return false
	end

	function NewDrawing(InstanceName)
		local Instance = Drawing.new(InstanceName);
		return (function(Properties)
			for i, v in pairs(Properties) do
				pcall(Set, Instance, i, v);
			end
			return Instance;
		end)
	end

	function Menu:AddMenuInstace(Name, Instance)
		if shared.MenuDrawingData.Instances[Name] ~= nil then
			shared.MenuDrawingData.Instances[Name]:Remove();
		end
		shared.MenuDrawingData.Instances[Name] = Instance;
		return Instance;
	end
	function Menu:UpdateMenuInstance(Name)
		local Instance = shared.MenuDrawingData.Instances[Name];
		if Instance ~= nil then
			return (function(Properties)
				for i, v in pairs(Properties) do
					-- print(Format('%s %s -> %s', Name, tostring(i), tostring(v)));
					pcall(Set, Instance, i, v);
				end
				return Instance;
			end)
		end
	end
	function Menu:GetInstance(Name)
		return shared.MenuDrawingData.Instances[Name];
	end

	function LineBox:Create(Properties)
		local Box = { Visible = true }; -- prevent errors not really though dont worry bout the Visible = true thing

		local Properties = Combine({
			Transparency = 1;
			Thickness = 1;
			Visible = true;
		}, Properties);

		Box['TopLeft'] = NewDrawing'Line'(Properties);
		Box['TopRight'] = NewDrawing'Line'(Properties);
		Box['BottomLeft'] = NewDrawing'Line'(Properties);
		Box['BottomRight'] = NewDrawing'Line'(Properties);

		function Box:Update(CF, Size, Color, Properties)
			if not CF or not Size then return end

			local TLPos, Visible1 = Camera:WorldToViewportPoint((CF * CFrame.new( Size.X,  Size.Y, 0)).p);
			local TRPos, Visible2 = Camera:WorldToViewportPoint((CF * CFrame.new(-Size.X,  Size.Y, 0)).p);
			local BLPos, Visible3 = Camera:WorldToViewportPoint((CF * CFrame.new( Size.X, -Size.Y, 0)).p);
			local BRPos, Visible4 = Camera:WorldToViewportPoint((CF * CFrame.new(-Size.X, -Size.Y, 0)).p);
			-- ## BEGIN UGLY CODE
			if Visible1 then
				Box['TopLeft'].Visible = true;
				Box['TopLeft'].Color = Color;
				Box['TopLeft'].From = Vector2.new(TLPos.X, TLPos.Y);
				Box['TopLeft'].To = Vector2.new(TRPos.X, TRPos.Y);
			else
				Box['TopLeft'].Visible = false;
			end
			if Visible2 then
				Box['TopRight'].Visible = true;
				Box['TopRight'].Color = Color;
				Box['TopRight'].From = Vector2.new(TRPos.X, TRPos.Y);
				Box['TopRight'].To = Vector2.new(BRPos.X, BRPos.Y);
			else
				Box['TopRight'].Visible = false;
			end
			if Visible3 then
				Box['BottomLeft'].Visible = true;
				Box['BottomLeft'].Color = Color;
				Box['BottomLeft'].From = Vector2.new(BLPos.X, BLPos.Y);
				Box['BottomLeft'].To = Vector2.new(TLPos.X, TLPos.Y);
			else
				Box['BottomLeft'].Visible = false;
			end
			if Visible4 then
				Box['BottomRight'].Visible = true;
				Box['BottomRight'].Color = Color;
				Box['BottomRight'].From = Vector2.new(BRPos.X, BRPos.Y);
				Box['BottomRight'].To = Vector2.new(BLPos.X, BLPos.Y);
			else
				Box['BottomRight'].Visible = false;
			end
			-- ## END UGLY CODE
			if Properties then
				GetTableData(Properties)(function(i, v)
					pcall(Set, Box['TopLeft'], i, v);
					pcall(Set, Box['TopRight'], i, v);
					pcall(Set, Box['BottomLeft'], i, v);
					pcall(Set, Box['BottomRight'], i, v);
				end)
			end
		end
		function Box:SetVisible(bool)
			pcall(Set, Box['TopLeft'], 'Visible', bool);
			pcall(Set, Box['TopRight'], 'Visible', bool);
			pcall(Set, Box['BottomLeft'], 'Visible', bool);
			pcall(Set, Box['BottomRight'], 'Visible', bool);
		end
		function Box:Remove()
			self:SetVisible(false);
			Box['TopLeft']:Remove();
			Box['TopRight']:Remove();
			Box['BottomLeft']:Remove();
			Box['BottomRight']:Remove();
		end

		return Box;
	end

	function CreateMenu(NewPosition) -- Create Menu
		local function FromHex(HEX)
			HEX = HEX:gsub('#', '');
			return Color3.fromRGB(tonumber('0x' .. HEX:sub(1, 2)), tonumber('0x' .. HEX:sub(3, 4)), tonumber('0x' .. HEX:sub(5, 6)));
		end

		local Colors = {
			Primary = {
				Main = FromHex'424242';
				Light = FromHex'6d6d6d';
				Dark = FromHex'1b1b1b';
			};
			Secondary = {
				Main = FromHex'e0e0e0';
				Light = FromHex'ffffff';
				Dark = FromHex'aeaeae';
			};
		};

		MenuLoaded = false;

		GetTableData(UIButtons)(function(i, v)
			v.Instance.Visible = false;
			v.Instance:Remove();
		end)
		GetTableData(Sliders)(function(i, v)
			v.Instance.Visible = false;
			v.Instance:Remove();
		end)

		UIButtons = {};
		Sliders = {};

		local BaseSize = Vector2.new(300, 580);
		local BasePosition = NewPosition or Vector2.new(Camera.ViewportSize.X / 8 - (BaseSize.X / 2), Camera.ViewportSize.Y / 2 - (BaseSize.Y / 2));

		Menu:AddMenuInstace('CrosshairX', NewDrawing'Line'{
			Visible = false;
			Color = Color3.new(0, 1, 0);
			Transparency = 1;
			Thickness = 1;
		});
		Menu:AddMenuInstace('CrosshairY', NewDrawing'Line'{
			Visible = false;
			Color = Color3.new(0, 1, 0);
			Transparency = 1;
			Thickness = 1;
		});

		delay(.025, function() -- since zindex doesnt exist
			Menu:AddMenuInstace('Main', NewDrawing'Square'{
				Size = BaseSize;
				Position = BasePosition;
				Filled = false;
				Color = Colors.Primary.Main;
				Thickness = 3;
				Visible = true;
			});
		end);
		Menu:AddMenuInstace('TopBar', NewDrawing'Square'{
			Position = BasePosition;
			Size = Vector2.new(BaseSize.X, 25);
			Color = Colors.Primary.Dark;
			Filled = true;
			Visible = true;
		});
		Menu:AddMenuInstace('TopBarTwo', NewDrawing'Square'{
			Position = BasePosition + Vector2.new(0, 25);
			Size = Vector2.new(BaseSize.X, 60);
			Color = Colors.Primary.Main;
			Filled = true;
			Visible = true;
		});
		Menu:AddMenuInstace('TopBarText', NewDrawing'Text'{
			Size = 25;
			Position = shared.MenuDrawingData.Instances.TopBarTwo.Position + Vector2.new(25, 15);
			Text = 'Unnamed ESP';
			Color = Colors.Secondary.Light;
			Visible = true;
		});
		Menu:AddMenuInstace('TopBarTextBR', NewDrawing'Text'{
			Size = 15;
			Position = shared.MenuDrawingData.Instances.TopBarTwo.Position + Vector2.new(BaseSize.X - 65, 40);
			Text = 'by ic3w0lf';
			Color = Colors.Secondary.Dark;
			Visible = true;
		});
		Menu:AddMenuInstace('Filling', NewDrawing'Square'{
			Size = BaseSize - Vector2.new(0, 85);
			Position = BasePosition + Vector2.new(0, 85);
			Filled = true;
			Color = Colors.Secondary.Main;
			Transparency= .5;
			Visible = true;
		});

		local CPos = 0;

		GetTableData(Options)(function(i, v)
			if typeof(v.Value) == 'boolean' and not IsStringEmpty(v.Text) and v.Text ~= nil then
				CPos = CPos + 25;
				local BaseSize = Vector2.new(BaseSize.X, 30);
				local BasePosition = shared.MenuDrawingData.Instances.Filling.Position + Vector2.new(30, v.Index * 25 - 10);
				UIButtons[#UIButtons + 1] = {
					Option = v;
					Instance = Menu:AddMenuInstace(Format('%s_Hitbox', v.Name), NewDrawing'Square'{
						Position = BasePosition - Vector2.new(30, 15);
						Size = BaseSize;
						Visible = false;
					});
				};
				Menu:AddMenuInstace(Format('%s_OuterCircle', v.Name), NewDrawing'Circle'{
					Radius = 10;
					Position = BasePosition;
					Color = Colors.Secondary.Light;
					Filled = true;
					Visible = true;
				});
				Menu:AddMenuInstace(Format('%s_InnerCircle', v.Name), NewDrawing'Circle'{
					Radius = 7;
					Position = BasePosition;
					Color = Colors.Secondary.Dark;
					Filled = true;
					Visible = v.Value;
				});
				Menu:AddMenuInstace(Format('%s_Text', v.Name), NewDrawing'Text'{
					Text = v.Text;
					Size = 20;
					Position = BasePosition + Vector2.new(20, -10);
					Visible = true;
					Color = Colors.Primary.Dark;
				});
			end
		end)
		GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
			if typeof(v.Value) == 'number' then
				CPos = CPos + 25;

				local BaseSize = Vector2.new(BaseSize.X, 30);
				local BasePosition = shared.MenuDrawingData.Instances.Filling.Position + Vector2.new(0, CPos - 10);

				local Text = Menu:AddMenuInstace(Format('%s_Text', v.Name), NewDrawing'Text'{
					Text = v.Text;
					Size = 20;
					Position = BasePosition + Vector2.new(20, -10);
					Visible = true;
					Color = Colors.Primary.Dark;
				});
				local AMT = Menu:AddMenuInstace(Format('%s_AmountText', v.Name), NewDrawing'Text'{
					Text = tostring(v.Value);
					Size = 20;
					Position = BasePosition;
					Visible = true;
					Color = Colors.Primary.Dark;
				});
				local Line = Menu:AddMenuInstace(Format('%s_SliderLine', v.Name), NewDrawing'Line'{
					Transparency = 1;
					Color = Colors.Primary.Dark;
					Thickness = 3;
					Visible = true;
					From = BasePosition + Vector2.new(20, 20);
					To = BasePosition + Vector2.new(BaseSize.X - 10, 20);
				});
				CPos = CPos + 10;
				local Slider = Menu:AddMenuInstace(Format('%s_Slider', v.Name), NewDrawing'Circle'{
					Visible = true;
					Filled = true;
					Radius = 6;
					Color = Colors.Secondary.Dark;
					Position = BasePosition + Vector2.new(35, 20);
				})

				local CSlider = {Slider = Slider; Line = Line; Min = v.AllArgs[4]; Max = v.AllArgs[5]; Option = v};
				Sliders[#Sliders + 1] = CSlider;

				-- local Percent = (v.Value / CSlider.Max) * 100;
				-- local Size = math.abs(Line.From.X - Line.To.X);
				-- local Value = Size * (Percent / 100); -- this shit's inaccurate but fuck it i'm not even gonna bother fixing it

				Slider.Position = BasePosition + Vector2.new(40, 20);

				v.BaseSize = BaseSize;
				v.BasePosition = BasePosition;
				AMT.Position = BasePosition + Vector2.new(BaseSize.X - AMT.TextBounds.X - 10, -10)
			end
		end)
		GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
			if typeof(v.Value) == 'EnumItem' then
				CPos = CPos + 30;

				local BaseSize = Vector2.new(BaseSize.X, 30);
				local BasePosition = shared.MenuDrawingData.Instances.Filling.Position + Vector2.new(0, CPos - 10);

				UIButtons[#UIButtons + 1] = {
					Option = v;
					Instance = Menu:AddMenuInstace(Format('%s_Hitbox', v.Name), NewDrawing'Square'{
						Size = Vector2.new(BaseSize.X, 20) - Vector2.new(30, 0);
						Visible = true;
						Transparency= .5;
						Position = BasePosition + Vector2.new(15, -10);
						Color = Colors.Secondary.Light;
						Filled = true;
					});
				};
				local Text = Menu:AddMenuInstace(Format('%s_Text', v.Name), NewDrawing'Text'{
					Text = v.Text;
					Size = 20;
					Position = BasePosition + Vector2.new(20, -10);
					Visible = true;
					Color = Colors.Primary.Dark;
				});
				local BindText = Menu:AddMenuInstace(Format('%s_BindText', v.Name), NewDrawing'Text'{
					Text = tostring(v.Value):match'%w+%.%w+%.(.+)';
					Size = 20;
					Position = BasePosition;
					Visible = true;
					Color = Colors.Primary.Dark;
				});

				Options[i].BaseSize = BaseSize;
				Options[i].BasePosition = BasePosition;
				BindText.Position = BasePosition + Vector2.new(BaseSize.X - BindText.TextBounds.X - 20, -10);
			end
		end)
		GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
			if typeof(v.Value) == 'function' then
				local BaseSize = Vector2.new(BaseSize.X, 30);
				local BasePosition = shared.MenuDrawingData.Instances.Filling.Position + Vector2.new(0, CPos + (25 * v.AllArgs[4]) - 35);

				UIButtons[#UIButtons + 1] = {
					Option = v;
					Instance = Menu:AddMenuInstace(Format('%s_Hitbox', v.Name), NewDrawing'Square'{
						Size = Vector2.new(BaseSize.X, 20) - Vector2.new(30, 0);
						Visible = true;
						Transparency= .5;
						Position = BasePosition + Vector2.new(15, -10);
						Color = Colors.Secondary.Light;
						Filled = true;
					});
				};
				local Text = Menu:AddMenuInstace(Format('%s_Text', v.Name), NewDrawing'Text'{
					Text = v.Text;
					Size = 20;
					Position = BasePosition + Vector2.new(20, -10);
					Visible = true;
					Color = Colors.Primary.Dark;
				});

				-- BindText.Position = BasePosition + Vector2.new(BaseSize.X - BindText.TextBounds.X - 10, -10);
			end
		end)

		delay(.1, function()
			MenuLoaded = true;
		end);

		-- this has to be at the bottom cuz proto drawing api doesnt have zindex :triumph:
		Menu:AddMenuInstace('Cursor1', NewDrawing'Line'{
			Visible = false;
			Color = Color3.new(1, 0, 0);
			Transparency = 1;
			Thickness = 2;
		});
		Menu:AddMenuInstace('Cursor2', NewDrawing'Line'{
			Visible = false;
			Color = Color3.new(1, 0, 0);
			Transparency = 1;
			Thickness = 2;
		});
		Menu:AddMenuInstace('Cursor3', NewDrawing'Line'{
			Visible = false;
			Color = Color3.new(1, 0, 0);
			Transparency = 1;
			Thickness = 2;
		});
	end

	CreateMenu();

	shared.InputBeganCon = UserInputService.InputBegan:connect(function(input)
		if input.UserInputType.Name == 'MouseButton1' and Options.MenuOpen.Value then
			MouseHeld = true;
			local Bar = Menu:GetInstance'TopBar';
			local Values = {
				Bar.Position.X;
				Bar.Position.Y;
				Bar.Position.X + Bar.Size.X;
				Bar.Position.Y + Bar.Size.Y;
			}
			if MouseHoveringOver(Values) and not syn then -- disable dragging for synapse cuz idk why it breaks
				DraggingUI = false; -- also breaks for other exploits
				DragOffset = Menu:GetInstance'Main'.Position - GetMouseLocation();
			else
				for i, v in pairs(Sliders) do
					local Values = {
						v.Line.From.X - (v.Slider.Radius);
						v.Line.From.Y - (v.Slider.Radius);
						v.Line.To.X + (v.Slider.Radius);
						v.Line.To.Y + (v.Slider.Radius);
					};
					if MouseHoveringOver(Values) then
						DraggingWhat = v;
						Dragging = true;
						break
					end
				end
			end
		end
	end)
	shared.InputEndedCon = UserInputService.InputEnded:connect(function(input)
		if input.UserInputType.Name == 'MouseButton1' and Options.MenuOpen.Value then
			MouseHeld = false;
			for i, v in pairs(UIButtons) do
				local Values = {
					v.Instance.Position.X;
					v.Instance.Position.Y;
					v.Instance.Position.X + v.Instance.Size.X;
					v.Instance.Position.Y + v.Instance.Size.Y;
				};
				if MouseHoveringOver(Values) then
					v.Option();
					break -- prevent clicking 2 options
				end
			end
		elseif input.UserInputType.Name == 'Keyboard' then
			if Binding then
				BindedKey = input.KeyCode;
				Binding = false;
			elseif input.KeyCode == Options.MenuKey.Value or (input.KeyCode == Enum.KeyCode.Home and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl)) then
				Options.MenuOpen();
			end
		end
	end)

	function ToggleMenu()
		if Options.MenuOpen.Value then
			GetTableData(shared.MenuDrawingData.Instances)(function(i, v)
				if OldData[v] then
					pcall(Set, v, 'Visible', true);
				end
			end)
		else
			-- GUIService:SetMenuIsOpen(false);
			GetTableData(shared.MenuDrawingData.Instances)(function(i, v)
				if v.Visible == true then
					OldData[v] = true;
					pcall(Set, v, 'Visible', false);
				end
			end)
		end
	end

	function CheckRay(Player, Distance, Position, Unit)
		local Pass = true;

		if Distance > 999 then return false; end

		local _Ray = Ray.new(Position, Unit * Distance);

		local List = {LocalPlayer.Character, Camera, Mouse.TargetFilter};

		for i,v in pairs(IgnoreList) do table.insert(List, v); end;

		local Hit = workspace:FindPartOnRayWithIgnoreList(_Ray, List);
		if Hit and not Hit:IsDescendantOf(Player.Character) then
			Pass = false;
			if Hit.Transparency >= .3 or not Hit.CanCollide and Hit.ClassName ~= Terrain then -- Detect invisible walls
				IgnoreList[#IgnoreList + 1] = Hit;
			end
		end

		return Pass;
	end

	function CheckPlayer(Player)
		if not Options.Enabled.Value then return false end

		local Pass = true;
		local Distance = 0;

		if Player ~= LocalPlayer and Player.Character then
			if not Options.ShowTeam.Value and Player.TeamColor == LocalPlayer.TeamColor then
				Pass = false;
			end

			local Head = Player.Character:FindFirstChild'Head';

			if Pass and Player.Character and Head then
				Distance = (Camera.CFrame.p - Head.Position).magnitude;
				if Options.VisCheck.Value then
					Pass = CheckRay(Player, Distance, Camera.CFrame.p, (Head.Position - Camera.CFrame.p).unit);
				end
				if Distance > Options.MaxDistance.Value then
					Pass = false;
				end
			end
		else
			Pass = false;
		end

		return Pass, Distance;
	end

	function UpdatePlayerData()
		if (tick() - LastRefresh) > (Options.RefreshRate.Value / 1000) then
			LastRefresh = tick();
			for i, v in pairs(Players:GetPlayers()) do
				local Data = shared.PlayerData[v.Name] or { Instances = {} };

				Data.Instances['Box'] = Data.Instances['Box'] or LineBox:Create{Thickness = 3};
				Data.Instances['Tracer'] = Data.Instances['Tracer'] or NewDrawing'Line'{
					Transparency = 1;
					Thickness = 2;
				}
				Data.Instances['HeadDot'] = Data.Instances['HeadDot'] or NewDrawing'Circle'{
					Filled = true;
					NumSides = 30;
				}
				Data.Instances['NameTag'] = Data.Instances['NameTag'] or NewDrawing'Text'{
					Size = Options.TextSize.Value;
					Center = true;
					Outline = Options.TextOutline.Value;
					Visible = true;
				};
				Data.Instances['DistanceHealthTag'] = Data.Instances['DistanceHealthTag'] or NewDrawing'Text'{
					Size = Options.TextSize.Value - 1;
					Center = true;
					Outline = Options.TextOutline.Value;
					Visible = true;
				};

				local NameTag = Data.Instances['NameTag'];
				local DistanceTag = Data.Instances['DistanceHealthTag'];
				local Tracer = Data.Instances['Tracer'];
				local HeadDot = Data.Instances['HeadDot'];
				local Box = Data.Instances['Box'];

				local Pass, Distance = CheckPlayer(v);

				if Pass and v.Character then
					Data.LastUpdate = tick();
					local Humanoid = v.Character:FindFirstChildOfClass'Humanoid';
					local Head = v.Character:FindFirstChild'Head';
					local HumanoidRootPart = v.Character:FindFirstChild'HumanoidRootPart';
					if v.Character ~= nil and Head then
						local ScreenPosition, Vis = Camera:WorldToViewportPoint(Head.Position);
						if Vis then
							local Color = v.TeamColor == LocalPlayer.TeamColor and Green or Red;

							local ScreenPositionUpper = Camera:WorldToViewportPoint(Head.CFrame * CFrame.new(0, Head.Size.Y, 0).p);
							local Scale = Head.Size.Y / 2;

							if Options.ShowName.Value then
								NameTag.Visible = true;
								NameTag.Text = v.Name;
								NameTag.Size = Options.TextSize.Value;
								NameTag.Outline = Options.TextOutline.Value;
								NameTag.Position = Vector2.new(ScreenPositionUpper.X, ScreenPositionUpper.Y);
								NameTag.Color = Color;
								if Drawing.Fonts then -- CURRENTLY SYNAPSE ONLY :MEGAHOLY:
									NameTag.Font = Drawing.Fonts.UI;
								end
							else
								NameTag.Visible = false;
							end
							if Options.ShowDistance.Value or Options.ShowHealth.Value then
								DistanceTag.Visible = true;
								DistanceTag.Size = Options.TextSize.Value - 1;
								DistanceTag.Outline = Options.TextOutline.Value;
								DistanceTag.Color = Color3.new(1, 1, 1);
								if Drawing.Fonts then -- CURRENTLY SYNAPSE ONLY :MEGAHOLY:
									NameTag.Font = Drawing.Fonts.UI;
								end

								local Str = '';

								if Options.ShowDistance.Value then
									Str = Str .. Format('[%d] ', Distance);
								end
								if Options.ShowHealth.Value and Humanoid then
									Str = Str .. Format('[%d/100]', Humanoid.Health / Humanoid.MaxHealth * 100);
								end

								DistanceTag.Text = Str;
								DistanceTag.Position = Vector2.new(ScreenPositionUpper.X, ScreenPositionUpper.Y) + Vector2.new(0, NameTag.Size);
							else
								DistanceTag.Visible = false;
							end
							if Options.ShowDot.Value then
								local Top = Camera:WorldToViewportPoint((Head.CFrame * CFrame.new(0, Scale, 0)).p);
								local Bottom = Camera:WorldToViewportPoint((Head.CFrame * CFrame.new(0, -Scale, 0)).p);
								local Radius = (Top - Bottom).y;

								HeadDot.Visible = true;
								HeadDot.Color = Color;
								HeadDot.Position = Vector2.new(ScreenPosition.X, ScreenPosition.Y);
								HeadDot.Radius = Radius;
							else
								HeadDot.Visible = false;
							end
							if Options.ShowTracers.Value then
								Tracer.Visible = true;
								Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y);
								Tracer.To = Vector2.new(ScreenPosition.X, ScreenPosition.Y);
								Tracer.Color = Color;
							else
								Tracer.Visible = false;
							end
							if Options.ShowBoxes.Value and HumanoidRootPart then
								Box:Update(HumanoidRootPart.CFrame, Vector3.new(2, 3, 0) * (Scale * 2), Color);
							else
								Box:SetVisible(false);
							end
						else
							NameTag.Visible = false;
							DistanceTag.Visible = false;
							Tracer.Visible = false;
							HeadDot.Visible = false;

							Box:SetVisible(false);
						end
					end
				else
					NameTag.Visible = false;
					DistanceTag.Visible = false;
					Tracer.Visible = false;
					HeadDot.Visible = false;

					Box:SetVisible(false);
				end

				shared.PlayerData[v.Name] = Data;
			end
		end
	end

	function Update()
		for i, v in pairs(shared.PlayerData) do
			if not Players:FindFirstChild(tostring(i)) then
				GetTableData(v.Instances)(function(i, obj)
					obj.Visible = false;
					obj:Remove();
					v.Instances[i] = nil;
				end)
				shared.PlayerData[i] = nil;
			end
		end

		local CX = Menu:GetInstance'CrosshairX';
		local CY = Menu:GetInstance'CrosshairY';
		if Options.Crosshair.Value then
			CX.Visible = true;
			CY.Visible = true;

			CX.To = Vector2.new((Camera.ViewportSize.X / 2) - 8, (Camera.ViewportSize.Y / 2));
			CX.From = Vector2.new((Camera.ViewportSize.X / 2) + 8, (Camera.ViewportSize.Y / 2));
			CY.To = Vector2.new((Camera.ViewportSize.X / 2), (Camera.ViewportSize.Y / 2) - 8);
			CY.From = Vector2.new((Camera.ViewportSize.X / 2), (Camera.ViewportSize.Y / 2) + 8);
		else
			CX.Visible = false;
			CY.Visible = false;
		end

		if Options.MenuOpen.Value and MenuLoaded then
			local MLocation = GetMouseLocation();
			shared.MenuDrawingData.Instances.Main.Color = Color3.fromHSV(tick() * 24 % 255/255, 1, 1);
			local MainInstance = Menu:GetInstance'Main';
			local Values = {
				MainInstance.Position.X;
				MainInstance.Position.Y;
				MainInstance.Position.X + MainInstance.Size.X;
				MainInstance.Position.Y + MainInstance.Size.Y;
			};
			if MainInstance and MouseHoveringOver(Values) then
				Debounce.CursorVis = true;
				-- GUIService:SetMenuIsOpen(true);
				Menu:UpdateMenuInstance'Cursor1'{
					Visible = true;
					From = Vector2.new(MLocation.x, MLocation.y);
					To = Vector2.new(MLocation.x + 5, MLocation.y + 6);
				}
				Menu:UpdateMenuInstance'Cursor2'{
					Visible = true;
					From = Vector2.new(MLocation.x, MLocation.y);
					To = Vector2.new(MLocation.x, MLocation.y + 8);
				}
				Menu:UpdateMenuInstance'Cursor3'{
					Visible = true;
					From = Vector2.new(MLocation.x, MLocation.y + 6);
					To = Vector2.new(MLocation.x + 5, MLocation.y + 5);
				}
			else
				if Debounce.CursorVis then
					Debounce.CursorVis = false;
					-- GUIService:SetMenuIsOpen(false);
					Menu:UpdateMenuInstance'Cursor1'{Visible = false};
					Menu:UpdateMenuInstance'Cursor2'{Visible = false};
					Menu:UpdateMenuInstance'Cursor3'{Visible = false};
				end
			end
			if MouseHeld then
				if Dragging then
					DraggingWhat.Slider.Position = Vector2.new(math.clamp(MLocation.X, DraggingWhat.Line.From.X, DraggingWhat.Line.To.X), DraggingWhat.Slider.Position.Y);
					local Percent = (DraggingWhat.Slider.Position.X - DraggingWhat.Line.From.X) / ((DraggingWhat.Line.To.X - DraggingWhat.Line.From.X));
					local Value = CalculateValue(DraggingWhat.Min, DraggingWhat.Max, Percent);
					DraggingWhat.Option(Value);
				elseif DraggingUI then
					Debounce.UIDrag = true;
					local Main = Menu:GetInstance'Main';
					local MousePos = GetMouseLocation();
					Main.Position = MousePos + DragOffset;
				end
			else
				Dragging = false;
				if DraggingUI and Debounce.UIDrag then
					Debounce.UIDrag = false;
					DraggingUI = false;
					CreateMenu(Menu:GetInstance'Main'.Position);
				end
			end
			if not Debounce.Menu then
				Debounce.Menu = true;
				ToggleMenu();
			end
		elseif Debounce.Menu and not Options.MenuOpen.Value then
			Debounce.Menu = false;
			ToggleMenu();
		end
	end

	RunService:UnbindFromRenderStep(GetDataName);
	RunService:UnbindFromRenderStep(UpdateName);

	RunService:BindToRenderStep(GetDataName, 1, UpdatePlayerData);
	RunService:BindToRenderStep(UpdateName, 1, Update);
end)

SilentFrame.Name = "SilentFrame"
SilentFrame.Parent = Frame
SilentFrame.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
SilentFrame.BorderColor3 = Color3.fromRGB(45, 45, 45)
SilentFrame.Position = UDim2.new(0.183066368, 0, 0.126760557, 0)
SilentFrame.Size = UDim2.new(0, 357, 0, 248)
SilentFrame.Visible = false

silentaim.Name = "silentaim"
silentaim.Parent = SilentFrame
silentaim.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
silentaim.BackgroundTransparency = 0.300
silentaim.Position = UDim2.new(0, 68, 0, 65)
silentaim.Size = UDim2.new(0, 200, 0, 50)
silentaim.Font = Enum.Font.SourceSansBold
silentaim.Text = "Silent Aim"
silentaim.TextColor3 = Color3.fromRGB(0, 0, 0)
silentaim.TextSize = 14.000
silentaim.MouseButton1Down:connect(function()
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local mouse = LocalPlayer:GetMouse()
	local Camera = workspace.CurrentCamera
	local Debris = game:GetService("Debris")
	local UserInputService = game:GetService("UserInputService")
	local target = false
	local RunService = game:GetService("RunService")


	getfenv().lock = "Hitbox" -- Head or Hitbox or Random

	fov = 150;
	local fovCircle = true;
	local st = tonumber(tick());
	warn("Loading script...")

	if fovCircle then
		function createcircle()
			local a=Drawing.new('Circle');a.Transparency=1;a.Thickness=1.5;a.Visible=true;a.Color=Color3.fromRGB(0,255,149);a.Filled=false;a.Radius=fov;
			return a;
		end;  
		local fovc = createcircle();
		spawn(function()
			RunService:BindToRenderStep("FovCircle",1,function()
				fovc.Position = Vector2.new(mouse.X,mouse.Y)
			end);
		end);
	end;

	function isFfa()
		local am = #Players:GetChildren();
		local amm = 0;
		for i , v in pairs(Players:GetChildren()) do
			if v.Team == LocalPlayer.Team then
				amm = amm + 1;
			end;
		end;
		return am == amm;
	end;
	function getnearest()
		local nearestmagnitude = math.huge
		local nearestenemy = nil
		local vector = nil
		local ffa = isFfa();
		for i,v in next, Players:GetChildren() do
			if ffa == false and v.Team ~= LocalPlayer.Team or ffa == true then
				if v.Character and  v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
					local vector, onScreen = Camera:WorldToScreenPoint(v.Character["HumanoidRootPart"].Position)
					if onScreen then
						local ray = Ray.new(
							Camera.CFrame.p,
							(v.Character["Head"].Position-Camera.CFrame.p).unit*500
						)
						local ignore = {
							LocalPlayer.Character,
						}
						local hit,position,normal=workspace:FindPartOnRayWithIgnoreList(ray,ignore)
						if hit and hit:FindFirstAncestorOfClass("Model") and Players:FindFirstChild(hit:FindFirstAncestorOfClass("Model").Name)then
							local magnitude = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(vector.X, vector.Y)).magnitude
							if magnitude < nearestmagnitude and magnitude <= fov then
								nearestenemy = v
								nearestmagnitude = magnitude
							end
						end
					end
				end
			end
		end
		return nearestenemy
	end


	local meta = getrawmetatable(game)
	setreadonly(meta, false)
	local oldNamecall = meta.__namecall
	meta.__namecall = newcclosure(function(...)

		local method = getnamecallmethod()
		local args = {...}
		if string.find(method,'Ray') then
			if target then
				if args[1].Name ~= "Workspace" then
					print(args[1])
				end;
				args[2] = Ray.new(workspace.CurrentCamera.CFrame.Position, (target.Position + Vector3.new(0,(workspace.CurrentCamera.CFrame.Position-target.Position).Magnitude/500,0) - workspace.CurrentCamera.CFrame.Position).unit * 5000)
			end
		end
		return oldNamecall(unpack(args))
	end)

	warn("Script loaded!\nTime taken: "..math.abs(tonumber(tick())-st))
	RunService:BindToRenderStep("SilentAim",1,function()
		if UserInputService:IsMouseButtonPressed(0) and Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid") and Players.LocalPlayer.Character.Humanoid.Health > 0 then
			local enemy = getnearest()
			if enemy and enemy.Character and enemy.Character:FindFirstChild("Humanoid") and enemy.Character.Humanoid.Health > 0 then                
				local vector, onScreen = Camera:WorldToScreenPoint(enemy.Character["Head"].Position)
				local head = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(vector.X, vector.Y)).magnitude
				local vector, onScreen = Camera:WorldToScreenPoint(enemy.Character["HumanoidRootPart"].Position)
				local hitbox = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(vector.X, vector.Y)).magnitude
				if head <= hitbox then
					magnitude = head
				else
					magnitude = hitbox;
				end;
				if getfenv().lock == "Head" then
					target = workspace[enemy.Name]["Head"]
				else
					if getfenv().lock == "Random" then
						if magnitude == hitbox then
							target = workspace[enemy.Name]["HumanoidRootPart"];
						else
							target = workspace[enemy.Name]["Head"]
						end;
					else
						target = workspace[enemy.Name]["HumanoidRootPart"];
					end;

				end;
			else
				target = nil
			end
		end
	end)
end)

HitFrame.Name = "HitFrame"
HitFrame.Parent = Frame
HitFrame.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
HitFrame.BorderColor3 = Color3.fromRGB(45, 45, 45)
HitFrame.Position = UDim2.new(0.183066368, 0, 0.126760557, 0)
HitFrame.Size = UDim2.new(0, 357, 0, 248)
HitFrame.Visible = false

small.Name = "small"
small.Parent = HitFrame
small.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
small.BackgroundTransparency = 0.300
small.Position = UDim2.new(0, 21, 0, 42)
small.Size = UDim2.new(0, 124, 0, 50)
small.Font = Enum.Font.SourceSansBold
small.Text = "Small Hitboxes"
small.TextColor3 = Color3.fromRGB(0, 0, 0)
small.TextSize = 14.000
small.MouseButton1Down:connect(function()


	-- CONFIGUATIONS --

	local size = 10 -- change this to how large you want your silent aim to be.

	-- SCRIPT --

	function getplrsname()
		for i,v in pairs(game:GetChildren()) do
			if v.ClassName == "Players" then
				return v.Name
			end
		end
	end
	local players = getplrsname()
	local plr = game[players].LocalPlayer
	coroutine.resume(coroutine.create(function()
		while  wait(1) do
			coroutine.resume(coroutine.create(function()
				for _,v in pairs(game[players]:GetPlayers()) do
					if v.Name ~= plr.Name and v.Character then
						v.Character["Right Leg"].CanCollide = false
						v.Character["Right Leg"].Transparency = 1
						v.Character["Right Leg"].Size = Vector3.new(size, size, size)

						v.Character["Left Leg"].CanCollide = false
						v.Character["Left Leg"].Transparency = 1
						v.Character["Left Leg"].Size = Vector3.new(size, size, size)

						v.Character.Head.CanCollide = false
						v.Character.Head.Transparency = 1
						v.Character.Head.Size = Vector3.new(6,6,6)

						v.Character.HumanoidRootPart.CanCollide = false
						v.Character.HumanoidRootPart.Transparency = 1
						v.Character.HumanoidRootPart.Size = Vector3.new(size, size, size)

					end
				end
			end))
		end
	end))
end)

bigbox.Name = "bigbox"
bigbox.Parent = HitFrame
bigbox.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
bigbox.BackgroundTransparency = 0.300
bigbox.Position = UDim2.new(0, 21, 0, 125)
bigbox.Size = UDim2.new(0, 124, 0, 50)
bigbox.Font = Enum.Font.SourceSansBold
bigbox.Text = "Big Hitboxes"
bigbox.TextColor3 = Color3.fromRGB(0, 0, 0)
bigbox.TextSize = 14.000
bigbox.MouseButton1Down:connect(function()


	-- CONFIGUATIONS --

	local size = 60 -- change this to how large you want your silent aim to be.

	-- SCRIPT --

	function getplrsname()
		for i,v in pairs(game:GetChildren()) do
			if v.ClassName == "Players" then
				return v.Name
			end
		end
	end
	local players = getplrsname()
	local plr = game[players].LocalPlayer
	coroutine.resume(coroutine.create(function()
		while  wait(1) do
			coroutine.resume(coroutine.create(function()
				for _,v in pairs(game[players]:GetPlayers()) do
					if v.Name ~= plr.Name and v.Character then
						v.Character["Right Leg"].CanCollide = false
						v.Character["Right Leg"].Transparency = 1
						v.Character["Right Leg"].Size = Vector3.new(size, size, size)

						v.Character["Left Leg"].CanCollide = false
						v.Character["Left Leg"].Transparency = 1
						v.Character["Left Leg"].Size = Vector3.new(size, size, size)

						v.Character.Head.CanCollide = false
						v.Character.Head.Transparency = 1
						v.Character.Head.Size = Vector3.new(6,6,6)

						v.Character.HumanoidRootPart.CanCollide = false
						v.Character.HumanoidRootPart.Transparency = 1
						v.Character.HumanoidRootPart.Size = Vector3.new(size, size, size)

					end
				end
			end))
		end
	end))
end)

CreditFrame.Name = "CreditFrame"
CreditFrame.Parent = Frame
CreditFrame.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
CreditFrame.BorderColor3 = Color3.fromRGB(45, 45, 45)
CreditFrame.Position = UDim2.new(0.183066368, 0, 0.126760557, 0)
CreditFrame.Size = UDim2.new(0, 357, 0, 248)
CreditFrame.Visible = false

TextLabel_2.Parent = CreditFrame
TextLabel_2.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
TextLabel_2.BorderColor3 = Color3.fromRGB(45, 45, 45)
TextLabel_2.BorderSizePixel = 0
TextLabel_2.Position = UDim2.new(0, 21, 0, 31)
TextLabel_2.Size = UDim2.new(0, 200, 0, 50)
TextLabel_2.Font = Enum.Font.SourceSansBold
TextLabel_2.Text = "All of Gui made by: mr wiz 3609"
TextLabel_2.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_2.TextSize = 14.000

TextLabel_3.Parent = CreditFrame
TextLabel_3.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
TextLabel_3.BorderColor3 = Color3.fromRGB(45, 45, 45)
TextLabel_3.BorderSizePixel = 0
TextLabel_3.Position = UDim2.new(0, 21, 0, 92)
TextLabel_3.Size = UDim2.new(0, 200, 0, 50)
TextLabel_3.Font = Enum.Font.SourceSansBold
TextLabel_3.Text = "Hitboxes made by: mr wiz 3609"
TextLabel_3.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_3.TextSize = 14.000

TextLabel_4.Parent = CreditFrame
TextLabel_4.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
TextLabel_4.BorderColor3 = Color3.fromRGB(45, 45, 45)
TextLabel_4.BorderSizePixel = 0
TextLabel_4.Position = UDim2.new(0, 21, 0, 142)
TextLabel_4.Size = UDim2.new(0, 200, 0, 50)
TextLabel_4.Font = Enum.Font.SourceSansBold
TextLabel_4.Text = "ESP made by: no one knows"
TextLabel_4.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_4.TextSize = 14.000

TextLabel_5.Parent = CreditFrame
TextLabel_5.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
TextLabel_5.BorderColor3 = Color3.fromRGB(45, 45, 45)
TextLabel_5.BorderSizePixel = 0
TextLabel_5.Position = UDim2.new(0, 21, 0, 189)
TextLabel_5.Size = UDim2.new(0, 200, 0, 50)
TextLabel_5.Font = Enum.Font.SourceSansBold
TextLabel_5.Text = "Silent aim edited by mr wiz 3609"
TextLabel_5.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_5.TextSize = 14.000

TextLabel_6.Parent = CreditFrame
TextLabel_6.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
TextLabel_6.BorderColor3 = Color3.fromRGB(45, 45, 45)
TextLabel_6.BorderSizePixel = 0
TextLabel_6.Position = UDim2.new(0, 21, 0, 223)
TextLabel_6.Size = UDim2.new(0, 200, 0, 25)
TextLabel_6.Font = Enum.Font.SourceSansBold
TextLabel_6.Text = "Silent aim owner : no one knows"
TextLabel_6.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_6.TextSize = 14.000

welcomebox.Name = "welcomebox"
welcomebox.Parent = Frame
welcomebox.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
welcomebox.BorderColor3 = Color3.fromRGB(45, 45, 45)
welcomebox.Position = UDim2.new(0.183066368, 0, 0.126760557, 0)
welcomebox.Size = UDim2.new(0, 357, 0, 248)

introductionbox.Name = "introductionbox"
introductionbox.Parent = welcomebox
introductionbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
introductionbox.BackgroundTransparency = 1.000
introductionbox.Position = UDim2.new(0.106442578, 0, 0.157258064, 0)
introductionbox.Size = UDim2.new(0, 271, 0, 58)
introductionbox.Font = Enum.Font.SourceSansBold
introductionbox.Text = "Hello. Welcome to dragonite hub. This is a script hub for deadzone."
introductionbox.TextColor3 = Color3.fromRGB(0, 0, 0)
introductionbox.TextScaled = true
introductionbox.TextSize = 14.000
introductionbox.TextWrapped = true

introductionbox_2.Name = "introductionbox"
introductionbox_2.Parent = welcomebox
introductionbox_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
introductionbox_2.BackgroundTransparency = 1.000
introductionbox_2.Position = UDim2.new(0.106442578, 0, 0.391129017, 0)
introductionbox_2.Size = UDim2.new(0, 271, 0, 58)
introductionbox_2.Font = Enum.Font.SourceSansBold
introductionbox_2.Text = "Made by : wizkids20"
introductionbox_2.TextColor3 = Color3.fromRGB(0, 0, 0)
introductionbox_2.TextSize = 14.000
introductionbox_2.TextWrapped = true

introductionbox_3.Name = "introductionbox"
introductionbox_3.Parent = welcomebox
introductionbox_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
introductionbox_3.BackgroundTransparency = 1.000
introductionbox_3.Position = UDim2.new(0.106442578, 0, 0.45161289, 0)
introductionbox_3.Size = UDim2.new(0, 271, 0, 58)
introductionbox_3.Font = Enum.Font.SourceSansBold
introductionbox_3.Text = "Made by : mr wiz#3609"
introductionbox_3.TextColor3 = Color3.fromRGB(0, 0, 0)
introductionbox_3.TextSize = 14.000
introductionbox_3.TextWrapped = true

login.Name = "login"
login.Parent = ScreenGui
login.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
login.BorderColor3 = Color3.fromRGB(45, 45, 45)
login.BorderSizePixel = 4
login.Position = UDim2.new(0.487974674, 0, 0.166427553, 0)
login.Size = UDim2.new(0, 282, 0, 341)
login.Visible = false
login.Active = true
login.Draggable = true

bar69.Name = "bar69"
bar69.Parent = login
bar69.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
bar69.BorderSizePixel = 0
bar69.Size = UDim2.new(0, 282, 0, 33)
bar69.Font = Enum.Font.SourceSansBold
bar69.Text = "Dragonite Login"
bar69.TextColor3 = Color3.fromRGB(0, 0, 0)
bar69.TextSize = 14.000

username.Name = "username"
username.Parent = login
username.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
username.BackgroundTransparency = 0.300
username.Position = UDim2.new(0.120567374, 0, 0.225806445, 0)
username.Size = UDim2.new(0, 200, 0, 50)
username.Font = Enum.Font.SourceSans
username.Text = "Username"
username.TextColor3 = Color3.fromRGB(0, 0, 0)
username.TextSize = 14.000

pass.Name = "pass"
pass.Parent = login
pass.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
pass.BackgroundTransparency = 0.300
pass.Position = UDim2.new(0.120567374, 0, 0.524926662, 0)
pass.Size = UDim2.new(0, 200, 0, 50)
pass.Font = Enum.Font.SourceSans
pass.Text = "Password"
pass.TextColor3 = Color3.fromRGB(0, 0, 0)
pass.TextSize = 14.000

login_2.Name = "login"
login_2.Parent = login
login_2.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
login_2.BackgroundTransparency = 0.300
login_2.Position = UDim2.new(0, 19, 0, 260)
login_2.Size = UDim2.new(0, 238, 0, 50)
login_2.SizeConstraint = Enum.SizeConstraint.RelativeYY
login_2.Font = Enum.Font.SourceSans
login_2.Text = "Login"
login_2.TextColor3 = Color3.fromRGB(0, 0, 0)
login_2.TextSize = 14.000

-- Scripts:

local function LTIH_fake_script() -- OpenandClose.LocalScript 
	local script = Instance.new('LocalScript', OpenandClose)

	script.Parent.MouseButton1Click:Connect(function()
		if script.Parent.Text == "Open" then
			script.Parent.Text = "Close"
			script.Parent.Parent.Frame.Visible = true
		else
			script.Parent.Text = "Open"
			script.Parent.Parent.Frame.Visible = false
		end
	end)
end
coroutine.wrap(LTIH_fake_script)()
local function MVMR_fake_script() -- destroy.LocalScript 
	local script = Instance.new('LocalScript', destroy)

	local root = script.Parent.Parent.Parent.Parent
	
	script.Parent.MouseButton1Click:Connect(function()
		root.Frame:Destroy()
		root.OpenandClose:Destroy()
		root:Destroy()
	end)
end
coroutine.wrap(MVMR_fake_script)()
local function BVWTK_fake_script() -- ESPbox.LocalScript 
	local script = Instance.new('LocalScript', ESPbox)

	
	local home = script.Parent.Parent.Parent
	
	
	script.Parent.MouseButton1Click:Connect(function()
		home.SilentFrame.Visible = false
		home.ESPFrame.Visible = true
		home.CreditFrame.Visible = false
		home.HitFrame.Visible = false
		home.welcomebox.Visible = false
	end)
end
coroutine.wrap(BVWTK_fake_script)()
local function AGPCP_fake_script() -- SilentAimbox.LocalScript 
	local script = Instance.new('LocalScript', SilentAimbox)

	
	local home = script.Parent.Parent.Parent
	
	
	script.Parent.MouseButton1Click:Connect(function()
		home.SilentFrame.Visible = true
		home.ESPFrame.Visible = false
		home.CreditFrame.Visible = false
		home.HitFrame.Visible = false
		home.welcomebox.Visible = false
	end)
end
coroutine.wrap(AGPCP_fake_script)()
local function IFJIBD_fake_script() -- Hitboxesbox.LocalScript 
	local script = Instance.new('LocalScript', Hitboxesbox)

	
	local home = script.Parent.Parent.Parent
	
	
	script.Parent.MouseButton1Click:Connect(function()
		home.SilentFrame.Visible = false
		home.ESPFrame.Visible = false
		home.CreditFrame.Visible = false
		home.HitFrame.Visible = true
		home.welcomebox.Visible = false
	end)
end
coroutine.wrap(IFJIBD_fake_script)()
local function ZICC_fake_script() -- Creditsbox.LocalScript 
	local script = Instance.new('LocalScript', Creditsbox)

	
	local home = script.Parent.Parent.Parent
	
	
	script.Parent.MouseButton1Click:Connect(function()
		home.SilentFrame.Visible = false
		home.ESPFrame.Visible = false
		home.CreditFrame.Visible = true
		home.HitFrame.Visible = false
		home.welcomebox.Visible = false
	end)
end
coroutine.wrap(ZICC_fake_script)()
local function FGPMJWB_fake_script() -- ScreenGui.LocalScript 
	local script = Instance.new('LocalScript', ScreenGui)

	wait(1.7)
	local dragon = script.Parent.Startup
	
	dragon.ImageTransparency = 0.2
	
	wait(0.1)
	
	dragon.ImageTransparency = 0.3
	
	wait(0.1)
	
	dragon.ImageTransparency = 0.5
	
	wait(0.1)
	
	dragon.ImageTransparency = 0.6
	
	wait(0.1)
	
	dragon.ImageTransparency = 0.85
	
	wait(.05)
	
	dragon.ImageTransparency = 1
end
coroutine.wrap(FGPMJWB_fake_script)()
local function LIPJS_fake_script() -- login_2.LocalScript 
	local script = Instance.new('LocalScript', login_2)

	script.Parent.MouseButton1Click:Connect(function()
		if script.Parent.Parent.username.Text == "admin" and script.Parent.Parent.pass.Text == "Pt6y75FvUSwRTzgn" then
			script.Parent.Parent.Visible = false
			script.Parent.Parent.Parent.OpenandClose.Visible = true
			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Loaded!";
				Text = "Enjoy Exploiting! We're also not responsible for any bans.";
				Duration = 3;
			})
		end
	end)
end
coroutine.wrap(LIPJS_fake_script)()
local function EXZN_fake_script() -- login.LocalScript 
	local script = Instance.new('LocalScript', login)

	
	
	wait(3)
	script.Parent.Visible = true
end
coroutine.wrap(EXZN_fake_script)()
